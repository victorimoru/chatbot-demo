@using WorkerAssistant.Client.Data
@using WorkerAssistant.Client.Services

<div class="message @GetMessageClass()">
    <div class="bubble @GetBubbleClass()">
        @((MarkupString)Markdig.Markdown.ToHtml(Message?.Content))

        @if (ShouldShowTranslation())
        {
            @if (!string.IsNullOrEmpty(TranslatedMessage))
            {
                <hr class="translation-divider" />
                <div class="translated-text">
                    <i>@TranslatedMessage</i>
                </div>
            }

            @if (!ResponseStatus)
            {
                <div class="translation-action-buttons">
                    <button class="translation-action-button"
                            title="Listen to this message"
                            @onclick="() => SpeakMessage()">
                        <i class="fas fa-volume-up"></i>
                    </button>

                    @if (LanguageService.CurrentLanguage == "ru" && Message?.Content.Length <= 400)
                    {
                        <button class="translation-action-button"
                                title="Translate this message"
                                @onclick="() => TranslateMessage(Message!)">
                            <i class="fas fa-language"></i>
                        </button>
                    }
                </div>
            }
        }
    </div>
    <span class="message-time">@GetTime()</span>
</div>

@code {
    [Parameter]
    public ChatMessage? Message { get; set; }

    [Parameter]
    public bool ResponseStatus { get; set; }

    [Inject] private ILanguageService LanguageService { get; set; } = default!;
    [Inject] private IWebSpeechTtsService webSpeechTtsService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private HttpClient HttpClient { get; set; } = default!;

    [Parameter]
    public EventCallback<ChatMessage> OnTranslateRequest { get; set; }

    private string TranslatedMessage { get; set; } = "";

    private string GetMessageClass() => Message?.Role switch
    {
        "user" => "message-user",
        "assistant" => "message-bot",
        _ => ""
    };

    private string GetBubbleClass() => Message?.Role switch
    {
        "user" => "user-bubble",
        "assistant" => "bot-bubble",
        _ => ""
    };

    private string GetTime() =>
        Message?.TimeStamp.ToString("HH:mm:ss") ?? DateTime.Now.ToString("HH:mm:ss");

    private bool ShouldShowTranslation() =>
        Message?.Role == "assistant" &&
        !Message.IsFirst &&
        (LanguageService.CurrentLanguage == "ru" || LanguageService.CurrentLanguage == "en");

    private bool ShouldShowListenButton() =>
        Message?.Role == "assistant" &&
        !string.IsNullOrWhiteSpace(Message.Content);

    private async Task TranslateMessage(ChatMessage message)
    {
        try
        {
            var apiUrl = $"https://api.mymemory.translated.net/get?q={Uri.EscapeDataString(message.Content)}&langpair=ru|en";
            var response = await HttpClient.GetFromJsonAsync<TranslationResponse>(apiUrl);

            if (!string.IsNullOrEmpty(response?.ResponseData?.TranslatedText))
            {
                TranslatedMessage = response.ResponseData.TranslatedText;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Translation failed: {ex.Message}");
        }
    }

    private async Task SpeakMessage()
    {
        if (Message == null) return;

        var lang = LanguageService.CurrentLanguage == "ru" ? "ru-RU" : "en-US";
        await webSpeechTtsService.SpeakAsync(Message.Content, lang);
    }
}